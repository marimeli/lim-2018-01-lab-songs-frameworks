{"version":3,"sources":["components/Navigation.js","components/Artists.js","components/Tracks.js","App.js","serviceWorker.js","index.js"],"names":["Example","state","collapsed","toggleNavbar","_this","setState","react_default","a","createElement","className","reactstrap_es","color","dark","href","onClick","this","isOpen","navbar","React","Component","Artists","_ref","artist","nextArtist","previousArtist","xs","src","image","alt","name","Tracks","track","trackname","count","App","artists","currentArtist","_this$state","length","_this$state2","_this2","fetch","then","res","json","data","map","arrPromisesSongs","Object","toConsumableArray","concat","catch","err","console","error","Promise","all","songsArr","forEach","i","tracks","toptracks","songs","playcount","_this3","log","_this$state3","Navigation_Example","react","components_Artists","key","components_Tracks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33540293.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\n\r\nexport default class Example extends React.Component {\r\n  state = {\r\n    collapsed: true\r\n  };\r\n\r\n  toggleNavbar = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar color=\"faded\" dark>\r\n          <NavbarBrand href=\"/\" className=\"mr-auto\">Ranking Songs</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/components/\">Artists</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">Tracks</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport '../App.css';\r\n\r\nconst Artists = ({ artist, nextArtist, previousArtist }) => (\r\n  <Row>\r\n    <Col xs=\"12\">\r\n      <i className=\"arrow previous fas fa-angle-left\" onClick={previousArtist}></i><img src={artist.image} alt=\"artist_photo\" className=\"img-fluid\" /><i className=\"arrow next fas fa-angle-right\" onClick={nextArtist} ></i>\r\n      <h3 className=\"tc-white mt-3\">{artist.name}</h3>\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\n\r\nexport default Artists;","import React from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport '../App.css';\r\n\r\nconst Tracks = ({ track }) => (\r\n  <Row className=\"mb-3 pt-3 m-auto\">\r\n    <Col className=\"col-8 col-sm-7 text-left tc-yellow\">\r\n      {track.trackname}\r\n    </Col>\r\n    <Col className=\"col-4 text-right tc-yellow\">\r\n      <p>{track.count}</p>\r\n      {/* <i className=\"fas fa-heart ml-2\"></i>\r\n    <i className=\"fas fa-thumbs-down ml-2\"></i> */}\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\n\r\nexport default Tracks;\r\n\r\n\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport Navigation from './components/Navigation';\nimport Artists from './components/Artists';\nimport Tracks from './components/Tracks'\n\nclass App extends Component {\n\n  state = {\n    artists: [],\n    currentArtist: 0\n  };\n\n  componentDidMount() {\n    fetch('http://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=5f7e08a667109d3fc3fab0397a234d2a&format=json&limit=10')\n      .then(res => res.json())\n      .then(data => {\n        const artists = data.artists.artist.map(artist => {\n          return {\n            name: artist.name,\n            image: artist.image[3]['#text']\n          }\n        })\n        const arrPromisesSongs = [...artists].map(({ name }) =>\n          fetch(`http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${name}&api_key=5f7e08a667109d3fc3fab0397a234d2a&format=json`)\n            .then(res => res.json())\n            .catch(err => console.error(err)))\n        Promise.all(arrPromisesSongs)\n          .then(songsArr => {\n            artists.forEach((artist, i) => {\n              const tracks = songsArr[i].toptracks.track;\n              artist.songs = tracks.map(track => {\n                return {\n                  trackname: track.name,\n                  count: track.playcount\n                }\n              });\n            })\n            this.setState({\n              artists\n            })\n          })\n      })\n  };\n\n  nextArtist = () => {\n    let { artists, currentArtist } = this.state;\n    currentArtist++\n\n    if (currentArtist >= artists.length) {\n      currentArtist = 0;\n    }\n    this.setState({\n      currentArtist\n    })\n  };\n\n  previousArtist = () => {\n    let { artists, currentArtist } = this.state;\n  \n    if (currentArtist === 0) {\n      this.setState({\n        currentArtist: (artists.length - 1)\n      })\n    }\n    else {\n      this.setState({\n        currentArtist: currentArtist - 1\n      })\n    }\n  };\n\n  // `http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${name}&api_key=5f7e08a667109d3fc3fab0397a234d2a&format=json`\n\n  render() {\n    console.log('la data 29', this.state.artists);\n    const { artists, currentArtist } = this.state;\n    return (\n\n      <div className=\"App\" >\n        <Navigation></Navigation>\n        <Container className=\"p-5\">\n          <Row className=\"mb-3 pt-3\">\n            <Col className=\"col-12 col-sm-6 m-auto wrap text-center\"> \n              {artists.length ?\n                artists.map((artist, i) =>\n                  <Fragment>\n                    <Artists artist={artist} key={i} previousArtist={this.previousArtist} nextArtist={this.nextArtist} />\n                    {artist.songs.map((track, i) =>\n                      <Tracks track={track} key={i} />\n                    )}\n                  </Fragment>\n                )[currentArtist]\n                : <p> Cargando ...</p>\n              }\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}